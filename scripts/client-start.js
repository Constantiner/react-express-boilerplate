import chalk from "chalk";
import fs from "fs";
import { checkBrowsers } from "react-dev-utils/browsersHelper";
import checkRequiredFiles from "react-dev-utils/checkRequiredFiles";
import clearConsole from "react-dev-utils/clearConsole";
import openBrowser from "react-dev-utils/openBrowser";
import { choosePort, createCompiler, prepareProxy, prepareUrls } from "react-dev-utils/WebpackDevServerUtils";
import webpack from "webpack";
import WebpackDevServer from "webpack-dev-server";
import { initEnvPromiseFactory } from "../config/client/clientEnvAsync";
import paths from "../config/client/clientPaths";
import configFactory from "../config/client/webpack.config.dev";
import devServerConfigFactory from "../config/client/webpackDevServer.config";

// Do this as the first thing so that any code reading it knows the right env.
process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

// Makes the script crash on unhandled rejections instead of silently
// ignoring them. In the future, promise rejections that are not handled will
// terminate the Node.js process with a non-zero exit code.
process.on("unhandledRejection", err => {
	throw err;
});

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

// Warn and crash if required files are missing
if (!checkRequiredFiles([paths.appHtml, paths.appIndexJs])) {
	process.exit(1);
}

const performStart = async () => {
	try {
		await initEnvPromiseFactory();

		// Tools like Cloud9 rely on this.
		const DEFAULT_PORT = parseInt(process.env.PORT, 10) || 3000;
		const HOST = process.env.HOST || "0.0.0.0";

		if (process.env.HOST) {
			console.log(
				chalk.cyan(
					`Attempting to bind to HOST environment variable: ${chalk.yellow(chalk.bold(process.env.HOST))}`
				)
			);
			console.log(`If this was unintentional, check that you haven't mistakenly set it in your shell.`);
			console.log(`Learn more here: ${chalk.yellow("http://bit.ly/CRA-advanced-config")}`);
			console.log();
		}

		// We require that you explicitly set browsers and do not fall back to
		// browserslist defaults.
		await checkBrowsers(paths.appPath, isInteractive);

		// We attempt to use the default port but if it is busy, we offer the user to
		// run on a different port. `choosePort()` Promise resolves to the next free port.
		const port = await choosePort(HOST, DEFAULT_PORT);
		if (port == null) {
			// We have not found a port.
			return;
		}
		const protocol = process.env.HTTPS === "true" ? "https" : "http";
		const appName = require(paths.appPackageJson).name;
		const urls = prepareUrls(protocol, HOST, port);
		const config = await configFactory();
		// Create a webpack compiler that is configured with custom messages.
		const compiler = createCompiler(webpack, config, appName, urls, useYarn);
		// Load proxy config
		const proxySetting = process.env.PROXY;
		const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
		const createDevServerConfig = await devServerConfigFactory();
		// Serve webpack assets generated by the compiler over a web server.
		const serverConfig = createDevServerConfig(proxyConfig, urls.lanUrlForConfig);
		const devServer = new WebpackDevServer(compiler, serverConfig);
		// Launch WebpackDevServer.
		devServer.listen(port, HOST, err => {
			if (err) {
				return console.log(err);
			}
			if (isInteractive) {
				clearConsole();
			}
			console.log(chalk.cyan("Starting the development server...\n"));
			openBrowser(urls.localUrlForBrowser);
		});

		["SIGINT", "SIGTERM"].forEach(function(sig) {
			process.on(sig, function() {
				devServer.close();
				process.exit();
			});
		});
	} catch (e) {
		if (e && e.message) {
			console.log(e.message);
		}
		process.exit(1);
	}
};

performStart();
